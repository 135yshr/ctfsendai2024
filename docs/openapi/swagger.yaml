basePath: /api/v1
definitions:
  dto.LoginResponse:
    properties:
      access_token:
        type: string
      expires_at:
        type: integer
    type: object
  dto.PlanResponse:
    description: プラン情報の詳細.
    properties:
      description:
        description: |-
          プランの説明
          @Example "基本的なサービスが含まれるプランです"
        example: 基本的なサービスが含まれるプランです
        type: string
      duration:
        description: |-
          プランの期間（日数）
          @Example 30
        example: 30
        type: integer
      id:
        description: |-
          プランID
          @Example "plan123"
        example: plan123
        type: string
      name:
        description: |-
          プラン名
          @Example "スタンダードプラン"
        example: スタンダードプラン
        type: string
      price:
        description: |-
          プランの価格
          @Example 1000
        example: 1000
        type: integer
    type: object
  dto.ReservationResponse:
    description: 予約情報の詳細.
    properties:
      end_time:
        description: |-
          予約終了時間
          @Example "2024-03-20T11:00:00Z"
        example: "2024-03-20T11:00:00Z"
        type: string
      id:
        description: |-
          予約ID
          @Example "rsv_123456"
        example: rsv_123456
        type: string
      plan:
        allOf:
        - $ref: '#/definitions/dto.PlanResponse'
        description: |-
          プラン情報
          @Example {"id": "plan123", "name": "スタンダードプラン"}
      start_time:
        description: |-
          予約開始時間
          @Example "2024-03-20T10:00:00Z"
        example: "2024-03-20T10:00:00Z"
        type: string
      status:
        description: |-
          予約ステータス
          @Example "confirmed"
        example: confirmed
        type: string
      user:
        allOf:
        - $ref: '#/definitions/dto.UserResponse'
        description: |-
          ユーザー情報
          @Example {"id": "user123", "name": "山田太郎"}
      user_id:
        description: |-
          ユーザーID
          @Example "user123"
        example: user123
        type: string
    type: object
  dto.UserResponse:
    description: ユーザー情報の詳細.
    properties:
      email:
        description: |-
          メールアドレス
          @Example "taro.yamada@example.com"
        example: taro.yamada@example.com
        type: string
      id:
        description: |-
          ユーザーID
          @Example "user123"
        example: user123
        type: string
      name:
        description: |-
          ユーザー名
          @Example "山田太郎"
        example: 山田太郎
        type: string
      phone:
        description: |-
          電話番号
          @Example "FLAG_dSQVRVTEFUSU9OU19GT1JfRklOSVNISU5H"
        example: FLAG_dSQVRVTEFUSU9OU19GT1JfRklOSVNISU5H
        type: string
    type: object
  presenters.LoginResponse:
    description: ログイン処理のレスポンス.
    properties:
      data:
        allOf:
        - $ref: '#/definitions/dto.LoginResponse'
        description: ログインデータ
      status:
        description: |-
          ステータス
          @Example "success"
        example: success
        type: string
    type: object
  presenters.PlansResponse:
    description: プラン一覧のレスポンス形式を定義する.
    properties:
      data:
        description: |-
          Data プラン情報一覧
          @Description プラン情報の配列
        items:
          $ref: '#/definitions/dto.PlanResponse'
        type: array
      status:
        description: |-
          Status レスポンスのステータス
          @Example "success"
        example: success
        type: string
    type: object
  presenters.ReservationResponse:
    description: 予約のレスポンス
    properties:
      data:
        allOf:
        - $ref: '#/definitions/dto.ReservationResponse'
        description: |-
          Data 予約データ
          @Description 予約の詳細情報
      status:
        description: |-
          Status レスポンスのステータス
          @Description レスポンスの状態を示す文字列
          @Example "success"
        example: success
        type: string
    type: object
  presenters.ReservationsResponse:
    description: 予約一覧のレスポンス
    properties:
      data:
        description: |-
          Data 予約データ一覧
          @Description 予約情報の配列
        items:
          $ref: '#/definitions/dto.ReservationResponse'
        type: array
      status:
        description: |-
          Status レスポンスのステータス
          @Description レスポンスの状態を示す文字列
          @Example "success"
        example: success
        type: string
    type: object
  presenters.SecretQuestionResponse:
    properties:
      secret_question:
        type: string
    type: object
  presenters.UserResponse:
    description: ユーザー情報の単一レスポンス形式を定義する.
    properties:
      data:
        allOf:
        - $ref: '#/definitions/dto.UserResponse'
        description: |-
          Data ユーザー情報
          @Description ユーザーの詳細情報
      status:
        description: |-
          Status レスポンスのステータス
          @Example "success"
        example: success
        type: string
    type: object
  response.ErrorResponse:
    description: エラー情報のレスポンス.
    properties:
      error:
        description: |-
          エラーメッセージ
          @Example "プランが見つかりません"
        example: プランが見つかりません
        type: string
      status:
        description: |-
          ステータス
          @Example "error"
        example: error
        type: string
    type: object
  validators.CreateReservationRequest:
    description: 新規予約を作成するためのリクエストパラメータ.
    properties:
      plan_id:
        description: |-
          プランID
          @Example "plan456"
        type: string
      start_date:
        description: |-
          予約開始日時
          @Example "2024-04-01T10:00:00+09:00"
        type: string
      user_id:
        description: |-
          ユーザーID
          @Example "user123"
        type: string
    required:
    - plan_id
    - start_date
    - user_id
    type: object
  validators.LoginRequest:
    description: ユーザーIDとパスワードによるログインリクエスト.
    properties:
      password:
        maxLength: 100
        minLength: 3
        type: string
      user_id:
        maxLength: 50
        minLength: 3
        type: string
    required:
    - password
    - user_id
    type: object
  validators.SecretLoginRequest:
    description: 秘密の質問の回答によるログインリクエスト.
    properties:
      secret_answer:
        minLength: 1
        type: string
      user_id:
        maxLength: 50
        minLength: 3
        type: string
    required:
    - secret_answer
    - user_id
    type: object
host: ctfweb2024.sectanlab.jp:8080
info:
  contact: {}
  description: 予約管理システムのRESTful API
  title: 予約管理システム API
  version: "1.0"
paths:
  /login:
    post:
      consumes:
      - application/json
      description: ユーザー名とパスワードを使用してログイン認証を行います
      parameters:
      - description: ログイン情報
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/validators.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: ログイン成功時のレスポンス
          schema:
            $ref: '#/definitions/presenters.LoginResponse'
        "400":
          description: リクエストの形式が不正
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: パスワードが一致しない
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: サーバー内部エラー
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: ユーザーログイン
      tags:
      - auth
  /plans:
    get:
      consumes:
      - application/json
      description: ユーザーの権限に基づいて、指定された検索条件に一致するプラン一覧を取得します
      parameters:
      - description: 開始日 (YYYY-MM-DD形式)
        in: query
        name: startDate
        type: string
      - description: 終了日 (YYYY-MM-DD形式)
        in: query
        name: endDate
        type: string
      - description: プランのステータス (reserved/canceled/confirmed/pending)
        in: query
        name: status
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: プラン一覧の取得に成功
          schema:
            $ref: '#/definitions/presenters.PlansResponse'
        "400":
          description: 不正なリクエストパラメータ
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: 認証エラー
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: サーバー内部エラー
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: プラン一覧取得API
      tags:
      - plans
  /reservations:
    get:
      consumes:
      - application/json
      description: 指定されたユーザーIDに紐づく予約の一覧を取得します
      parameters:
      - description: ユーザーID
        in: query
        maxLength: 50
        minLength: 3
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/presenters.ReservationsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: ユーザーの予約一覧を取得
      tags:
      - reservations
    post:
      consumes:
      - application/json
      description: ユーザーの新しい予約を作成します
      parameters:
      - description: 予約情報
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/validators.CreateReservationRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/presenters.ReservationResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: 新しい予約を作成
      tags:
      - reservations
  /secret-login:
    post:
      consumes:
      - application/json
      description: 秘密の質問の回答を使用してログイン認証を行います
      parameters:
      - description: 秘密の質問の回答情報
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/validators.SecretLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: ログイン成功時のレスポンス
          schema:
            $ref: '#/definitions/presenters.LoginResponse'
        "400":
          description: リクエストの形式が不正
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: 秘密の質問の回答が一致しない
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: サーバー内部エラー
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: 秘密の質問によるログイン
      tags:
      - auth
  /secret-question:
    get:
      consumes:
      - application/json
      description: ユーザーIDに対応する秘密の質問を取得します
      parameters:
      - description: ユーザーID
        in: query
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 秘密の質問
          schema:
            $ref: '#/definitions/presenters.SecretQuestionResponse'
        "400":
          description: リクエストの形式が不正
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: ユーザーが見つからない
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: サーバー内部エラー
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: 秘密の質問の取得
      tags:
      - auth
  /users:
    get:
      consumes:
      - application/json
      description: 全ユーザーの情報を取得します（管理者のみ）
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/presenters.UserResponse'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: ユーザー一覧取得
      tags:
      - users
  /users/me:
    get:
      consumes:
      - application/json
      description: ログイン中のユーザー情報を取得します
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/presenters.UserResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: ログインユーザー情報取得
      tags:
      - users
securityDefinitions:
  Bearer:
    description: Bearer Tokenによる認証
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
